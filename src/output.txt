// Contenido de: components/Pedidos.tsx

// Pedidos.tsx
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

const Pedidos: React.FC = () => {
  const [pedidos, setPedidos] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [confirmedPedidos, setConfirmedPedidos] = useState<Set<string>>(new Set());

  useEffect(() => {
    fetchPedidos();
  }, []);

  const fetchPedidos = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('pedidos')
        .select(`
          id,
          nombre,
          apellido,
          talle,
          color,
          diseno_id,
          producto_id,
          fecha,
          estado,
          disenos (nombre),
          productos (nombre)
        `)
        .order('fecha', { ascending: false });

      if (error) {
        console.error('Error fetching pedidos:', error.message);
        alert(`Error al cargar pedidos: ${error.message}`);
      } else {
        setPedidos(data || []);
        const confirmedIds = new Set(data?.filter(p => p.estado === 'confirmado').map(p => p.id) || []);
        setConfirmedPedidos(confirmedIds);
      }
    } catch (err) {
      console.error('Unexpected error fetching pedidos:', err);
      alert('Error inesperado al cargar pedidos.');
    } finally {
      setLoading(false);
    }
  };

  const handleToggleConfirm = async (id: string) => {
    const pedido = pedidos.find(p => p.id === id);
    if (!pedido) {
      console.error('Pedido no encontrado:', id);
      alert('Pedido no encontrado.');
      return;
    }

    const isConfirming = pedido.estado === 'pendiente';
    const newEstado = isConfirming ? 'confirmado' : 'pendiente';

    setLoading(true);
    try {
      // Update order status
      const { error: updateError } = await supabase
        .from('pedidos')
        .update({ estado: newEstado })
        .eq('id', id);

      if (updateError) throw updateError;

      // Adjust inventory based on action
      const stockUpdate = isConfirming
        ? { stock: supabase.sql`stock - 1` }
        : { stock: supabase.sql`stock + 1` };

      const { error: stockError, data } = await supabase
        .from('inventario')
        .update(stockUpdate)
        .eq('producto_id', pedido.producto_id)
        .eq('talla', pedido.talle)
        .eq('color', pedido.color)
        .gte('stock', isConfirming ? 1 : 0) // Ensure stock >= 1 when confirming
        .select('*');

      console.log('Stock update result:', { error: stockError, data });
      if (stockError) {
        // Revert order status on stock error
        await supabase.from('pedidos').update({ estado: pedido.estado }).eq('id', id);
        console.error('Error updating stock:', stockError.message);
        alert(`Error al actualizar stock: ${stockError.message}`);
        return;
      }

      // Update local confirmedPedidos state
      const newConfirmed = new Set(confirmedPedidos);
      if (isConfirming) {
        newConfirmed.add(id);
      } else {
        newConfirmed.delete(id);
      }
      setConfirmedPedidos(newConfirmed);
      await fetchPedidos(); // Refresh data
      alert(`Pedido ${isConfirming ? 'confirmado' : 'desconfirmado'} con éxito.`);
    } catch (err) {
      console.error('Error in handleToggleConfirm:', err);
      alert('Error al actualizar el estado del pedido.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeletePedido = async (id: string) => {
    const pedido = pedidos.find(p => p.id === id);
    if (!pedido) {
      console.error('Pedido no encontrado:', id);
      alert('Pedido no encontrado.');
      return;
    }

    // Show confirmation dialog
    const confirmDelete = window.confirm(`¿Estás seguro de que deseas eliminar el pedido de ${pedido.nombre} ${pedido.apellido}?`);
    if (!confirmDelete) return;

    setLoading(true);
    try {
      // If the order is confirmed, restore stock before deletion
      if (pedido.estado === 'confirmado') {
        const { error: stockError, data } = await supabase
          .from('inventario')
          .update({ stock: supabase.sql`stock + 1` })
          .eq('producto_id', pedido.producto_id)
          .eq('talla', pedido.talle)
          .eq('color', pedido.color)
          .select('*');

        console.log('Stock restore result:', { error: stockError, data });
        if (stockError) {
          console.error('Error restoring stock:', stockError.message);
          alert(`Error al restaurar stock: ${stockError.message}`);
          return;
        }
      }

      // Delete the order
      const { error: deleteError } = await supabase
        .from('pedidos')
        .delete()
        .eq('id', id);

      if (deleteError) throw deleteError;

      // Update local state
      const newConfirmed = new Set(confirmedPedidos);
      newConfirmed.delete(id);
      setConfirmedPedidos(newConfirmed);
      await fetchPedidos(); // Refresh data
      alert('Pedido eliminado con éxito.');
    } catch (err) {
      console.error('Error in handleDeletePedido:', err);
      alert('Error al eliminar el pedido.');
    } finally {
      setLoading(false);
    }
  };

  const getColorName = (hex: string): string => {
    const colorMap = {
      '#ffffff': 'Blanco',
      '#000000': 'Negro',
      '#ff0000': 'Rojo',
      '#0000ff': 'Azul',
      '#008000': 'Verde',
      '#ffff00': 'Amarillo',
      '#808080': 'Gris',
      '#ff69b4': 'Rosa',
      '#ffa500': 'Naranja',
      '#800080': 'Morado',
    };
    return colorMap[hex] || hex;
  };

  if (loading) {
    return <div className="text-center text-gray-600">Cargando pedidos...</div>;
  }

  return (
    <div className="bg-gray-50 py-10 px-4 w-full max-w-screen-xl mx-auto">
      <h2 className="text-3xl font-bold text-center mb-8 text-gray-800">Panel de Pedidos</h2>
      {pedidos.length > 0 ? (
        <div className="overflow-x-auto shadow-md rounded-lg">
          <table className="min-w-full bg-white border border-gray-200">
            <thead>
              <tr className="bg-blue-600 text-white">
                <th className="py-3 px-4 border-b text-left">ID</th>
                <th className="py-3 px-4 border-b text-left">Nombre</th>
                <th className="py-3 px-4 border-b text-left">Apellido</th>
                <th className="py-3 px-4 border-b text-left">Talle</th>
                <th className="py-3 px-4 border-b text-left">Color</th>
                <th className="py-3 px-4 border-b text-left">Diseño</th>
                <th className="py-3 px-4 border-b text-left">Producto</th>
                <th className="py-3 px-4 border-b text-left">Fecha</th>
                <th className="py-3 px-4 border-b text-left">Estado</th>
                <th className="py-3 px-4 border-b text-left">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {pedidos.map((pedido) => (
                <tr key={pedido.id} className="hover:bg-gray-100 transition-colors">
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.id.slice(0, 8)}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.nombre}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.apellido}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.talle}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{getColorName(pedido.color)}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.disenos?.nombre || 'Sin diseño'}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{pedido.productos?.nombre || 'Sin producto'}</td>
                  <td className="py-3 px-4 border-b text-gray-700">{new Date(pedido.fecha).toLocaleString()}</td>
                  <td className="py-3 px-4 border-b text-gray-700">
                    <span className={`px-2 py-1 rounded-full text-sm ${
                      pedido.estado === 'pendiente' ? 'bg-yellow-200 text-yellow-800'
                      : 'bg-green-200 text-green-800'
                    }`}>
                      {pedido.estado}
                    </span>
                  </td>
                  <td className="py-3 px-4 border-b">
                    <button
                      className={`px-3 py-1 rounded ${
                        pedido.estado === 'confirmado'
                          ? 'bg-green-600 text-white hover:bg-green-700'
                          : 'bg-blue-500 text-white hover:bg-blue-600'
                      } disabled:bg-gray-400 disabled:cursor-not-allowed`}
                      onClick={() => handleToggleConfirm(pedido.id)}
                      disabled={loading}
                    >
                      {pedido.estado === 'confirmado' ? 'Desconfirmar' : 'Confirmar'}
                    </button>
                    <button
                      className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 ml-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
                      onClick={() => handleDeletePedido(pedido.id)}
                      disabled={loading}
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p className="text-center text-gray-600">No hay pedidos registrados.</p>
      )}
    </div>
  );
};

export default Pedidos;

