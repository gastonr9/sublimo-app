// Contenido de: components/Burgon.tsx

import React, { useState, useEffect } from 'react';
import { useOrder } from '../context/OrderContext';
import { getProductos, getProductoPorId } from '../services/inventario';
import { Producto, Color } from '../types/types';
import diseño from '/public/images/dead-cool.png';
import remera from '/public/images/remera.png';
import remeracolor from '/public/images/remeracolor.png';
import remerahigh from '/public/images/remerahighlight.png';
import remerablack from '/public/images/remerablack.png';
import { getDesigns } from "../services/designs";
const Burgon: React.FC = () => {
  const { order, setOrder, selectedProduct, setSelectedProduct } = useOrder();
  const [productos, setProductos] = useState<Producto[]>([]);
  const [selectedProductoId, setSelectedProductoId] = useState(order.productoId || '');
  const [talles, setTalles] = useState<string[]>([]);
  const [coloresDisponibles, setColoresDisponibles] = useState<Color[]>([]);
const [designs, setDesigns] = useState<any[]>([]);
  useEffect(() => {
    const cargarProductos = async () => {
      const productosData = await getProductos();
      setProductos(productosData);
      if (productosData.length > 0 && !selectedProductoId) {
        const firstProductId = productosData[0].id;
        setSelectedProductoId(firstProductId);
        const producto = await getProductoPorId(firstProductId);
        if (producto) setSelectedProduct(producto);
      }
    };
    cargarProductos();
  }, []);

  useEffect(() => {
    const cargarProductoSeleccionado = async () => {
      if (selectedProductoId) {
        const producto = await getProductoPorId(selectedProductoId);
        if (producto) {
          setSelectedProduct(producto);
          setOrder({ ...order, productoId: selectedProductoId });

          // Extraer talles únicos del inventario
          const tallesUnicos = [...new Set(producto.inventario.map((i) => i.talla))].sort((a, b) => {
            const ordenTalles = { S: 0, M: 1, L: 2, XL: 3, XXL: 4 };
            return ordenTalles[a as keyof typeof ordenTalles] - ordenTalles[b as keyof typeof ordenTalles];
          });
          setTalles(tallesUnicos);

          // Mostrar solo colores con stock > 0 del inventario inicialmente
          if (producto.inventario) {
            const todosLosColores = [...new Set(producto.inventario.filter((i) => i.stock > 0).map((i) => i.color))]
              .map((nombre) => ({ nombre, hex: getDefaultHex(nombre) }))
              .sort((a, b) => a.nombre.localeCompare(b.nombre));
            setColoresDisponibles(todosLosColores);
          } else {
            setColoresDisponibles([]);
          }
        } else {
          setSelectedProduct(null);
          setTalles([]);
          setColoresDisponibles([]);
        }
      } else {
        setSelectedProduct(null);
        setTalles([]);
        setColoresDisponibles([]);
      }
    };
    cargarProductoSeleccionado();
  }, [selectedProductoId]);

  useEffect(() => {
    // Filtrar colores solo cuando se seleccione un talle, mostrando solo los con stock > 0
    if (selectedProduct && order.talle && selectedProduct.inventario) {
      const coloresPorTalle = selectedProduct.inventario
        .filter((i) => i.talla === order.talle && i.stock > 0)
        .map((i) => ({ nombre: i.color, hex: getDefaultHex(i.color) }))
        .sort((a, b) => a.nombre.localeCompare(b.nombre));
      setColoresDisponibles(coloresPorTalle);
    } else if (selectedProduct && selectedProduct.inventario) {
      // Si no hay talle seleccionado, mostrar todos los colores con stock > 0
      const todosLosColores = [...new Set(selectedProduct.inventario.filter((i) => i.stock > 0).map((i) => i.color))]
        .map((nombre) => ({ nombre, hex: getDefaultHex(nombre) }))
        .sort((a, b) => a.nombre.localeCompare(b.nombre));
      setColoresDisponibles(todosLosColores);
    }
  }, [order.talle, selectedProduct]);

  const handleProductoSelect = (id: string) => {
    setSelectedProductoId(id);
    setOrder({ ...order, talle: '', color: '', productoId: id }); // Resetea talle y color al cambiar producto
  };

  const handleTalleSelect = (talle: string) => {
    setOrder({ ...order, talle });
  };

  const handleColorSelect = (colorHex: string) => {
    const colorNombre = coloresDisponibles.find((c) => c.hex === colorHex)?.nombre;
    if (colorNombre) setOrder({ ...order, color: colorHex });
  };

  // Función auxiliar para asignar hex por defecto
  const getDefaultHex = (nombre: string): string => {
    const coloresConocidos = {
      Blanco: '#ffffff',
      Negro: '#000000',
      Rojo: '#ff0000',
      Azul: '#0000ff',
      Verde: '#008000',
      Amarillo: '#ffff00',
      Gris: '#808080',
      Rosa: '#ff69b4',
      Naranja: '#ffa500',
      Morado: '#800080',
    };
    return coloresConocidos[nombre] || '#000000';
  };

  // cargar productos
  useEffect(() => {
    const cargarProductos = async () => {
      const productosData = await getProductos();
      setProductos(productosData);

      if (productosData.length > 0 && !selectedProductoId) {
        const firstProductId = productosData[0].id;
        setSelectedProductoId(firstProductId);
        const producto = await getProductoPorId(firstProductId);
        if (producto) setSelectedProduct(producto);
      }
    };
    cargarProductos();
  }, []);

  // cargar diseños disponibles
  useEffect(() => {
    const cargarDesigns = async () => {
      try {
        const data = await getDesigns();
        setDesigns(data);
      } catch (err) {
        console.error("Error trayendo diseños:", err);
      }
    };
    cargarDesigns();
  }, []);



  return (
    <section className="bg-white py-10 px-4 w-full max-w-screen-xl mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6 text-gray-800">
        Elegí la prenda y el talle
      </h2>

      {/* Selector de Productos */}
      <div className="flex justify-center mb-6">
        <select
          value={selectedProductoId}
          onChange={(e) => handleProductoSelect(e.target.value)}
          className="border rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          {productos.map((producto) => (
            <option key={producto.id} value={producto.id}>
              {producto.nombre} - ${producto.precio.toFixed(2)}
            </option>
          ))}
        </select>
      </div>

      {/* Talles */}
      <div className="flex justify-center gap-4 mb-6 flex-wrap">
        {talles.length > 0 ? (
          talles.map((talle) => (
            <button
              key={talle}
              className={`px-4 py-2 rounded-lg border transition ${
                order.talle === talle
                  ? 'bg-blue-600 text-white border-blue-600'
                  : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-100'
              }`}
              onClick={() => handleTalleSelect(talle)}
              disabled={!selectedProduct}
            >
              {talle}
            </button>
          ))
        ) : selectedProduct ? (
          <p className="text-gray-600">No hay talles disponibles para este producto</p>
        ) : (
          <p className="text-gray-600">Selecciona un producto para ver talles</p>
        )}
      </div>

      {/* Selector de color */}
      <div className="flex justify-center gap-4 mb-4 flex-wrap">
        {coloresDisponibles.length > 0 ? (
          coloresDisponibles.map((color) => (
            <button
              key={color.hex}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg border transition ${
                order.color === color.hex
                  ? 'bg-blue-100 border-blue-600'
                  : 'bg-white border-gray-300 hover:bg-gray-100'
              } ${!order.talle ? 'opacity-50 cursor-not-allowed' : ''}`} // Opacidad y cursor cuando no hay talle
              onClick={() => (order.talle ? handleColorSelect(color.hex) : null)} // Solo clickable si hay talle
              disabled={!order.talle || !selectedProduct} // Deshabilitado hasta que se seleccione talle
            >
              <span className="text-gray-800">{color.nombre}</span>
              <div
                className="w-6 h-6 rounded-full border"
                style={{ backgroundColor: color.hex }}
              />
            </button>
          ))
        ) : selectedProduct && order.talle ? (
          <p className="text-gray-600">No hay colores disponibles para este talle</p>
        ) : (
          <p className="text-gray-600">Selecciona un talle para habilitar colores</p>
        )}
      </div>

      {/* Imagen con color aplicado */}
<div className="relative w-full flex justify-center">
  <div className="relative w-64 h-64">
    <div
      className="w-full h-full [mask-size:contain] [mask-repeat:no-repeat] [mask-position:center]"
      style={{
        backgroundColor: order.color || '#ffffff',
        maskImage: `url(${remeracolor})`,
      }}
    ></div>

    <img
      src={remera}
      alt="Remera"
      className="opacity-30 mix-blend-color-burn absolute inset-0 z-20 w-full h-full object-contain pointer-events-none"
    />
    <img
      src={remerahigh}
      alt="Remera"
      className="opacity-10 mix-blend-soft-light absolute inset-0 z-20 w-full h-full object-contain pointer-events-none"
    />
    <img
      src={remera}
      alt="Remera"
      className="mix-blend-multiply opacity-100 absolute inset-0 z-20 w-full h-full object-contain pointer-events-none"
    />
    <img
      src={remerablack}
      alt="Remera"
      className="opacity-100 mix-blend-screen absolute inset-0 z-20 w-full h-full object-contain pointer-events-none"
    />

    {/* 👇 Diseño seleccionado dinámico */}
    {order.disenoUrl && (
      <img
        src={order.disenoUrl}
        alt="diseño"
        className="opacity-100 mix-blend-normal absolute inset-0 z-30 w-full h-[50%] top-[20%]  object-contain pointer-events-none"
      />
    )}
  </div>
</div>
 {/* NUEVO: Contenedor de diseños */}
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4 text-gray-800 text-center">Elegí un diseño</h3>
        <div className="flex flex-wrap gap-4 justify-center">
          {designs.length > 0 ? (
            designs.map((design) => (
              <button
                key={design.id}
                className={`relative w-24 h-24 border rounded-lg overflow-hidden ${
                  order.disenoId === design.id ? "ring-2 ring-blue-500" : ""
                }`}
                onClick={() => setOrder({ ...order, disenoId: design.id, disenoUrl: design.imagen_url, })}
              >
                <img
                  src={design.imagen_url}
                  alt={design.nombre}
                  className="w-full h-full object-contain p-1"
                />
              </button>
            ))
          ) : (
            <p className="text-gray-600">No hay diseños disponibles</p>
          )}
        </div>
      </div>
      {/* Nombre y precio sincronizados */}
    <div className="text-center mb-4">
  <h3 className="text-lg font-semibold text-gray-800">
    {selectedProduct?.nombre || ''}
  </h3>
  {selectedProduct?.precio ? (
    <p className="text-xl font-bold text-gray-800">
      ${selectedProduct.precio.toFixed(2)}
    </p>
  ) : null}
</div>

      {/* Botón siguiente */}
      <div className="flex justify-center mt-6">
        <button
          className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition"
          onClick={() => {
            console.log('Siguiente');
          }}
          disabled={!selectedProduct || !order.talle || !order.color}
        >
          Siguiente
        </button>
      </div>
    </section>
  );
};

export default Burgon;

// Contenido de: components/Designs.tsx

import React, { useEffect, useState } from "react";
import { listDesignsFromStorage, uploadDesign } from "../services/storage";
import { getDesigns, addDesignMeta, updateDesign } from "../services/designs";

interface StorageDesign {
  name: string;
  url: string;
}

interface DesignRow {
  id: string;
  nombre: string;
  imagen_url: string;
  stock: number;
  selected: boolean;
}

const Designs: React.FC = () => {
  const [storageDesigns, setStorageDesigns] = useState<StorageDesign[]>([]);
  const [designsTable, setDesignsTable] = useState<DesignRow[]>([]);
  const [selectedDesigns, setSelectedDesigns] = useState<DesignRow[]>([]);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    fetchAll();
  }, []);

  const fetchAll = async () => {
    try {
      const [storage, table] = await Promise.all([listDesignsFromStorage(), getDesigns()]);
      setStorageDesigns(storage);
      setDesignsTable(table);
      // Sincronizar selectedDesigns con los que tienen selected = true
      const initiallySelected = table.filter((design) => design.selected);
      setSelectedDesigns(initiallySelected);
    } catch (err) {
      console.error("Error al traer diseños:", err);
    }
  };

  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      setUploading(true);
      try {
        const file = files[0];
        const newDesign = await uploadDesign(file);
        setDesignsTable((prev) => [...prev, newDesign]);
        setStorageDesigns((prev) => [
          ...prev,
          { name: newDesign.nombre, url: newDesign.imagen_url },
        ]);
      } catch (err) {
        console.error("Error al subir diseño:", err);
      } finally {
        setUploading(false);
        event.target.value = ""; // Reset input
      }
    }
  };

  const toggleSelectDesign = async (storageDesign: StorageDesign) => {
    const designRow = designsTable.find((d) => d.imagen_url === storageDesign.url);
    if (!designRow) return;

    const newSelected = !designRow.selected;
    const updatedDesign = await updateDesign(designRow.id, { selected: newSelected });
    setDesignsTable((prev) =>
      prev.map((d) => (d.id === designRow.id ? updatedDesign : d))
    );
    setSelectedDesigns((prev) =>
      newSelected
        ? [...prev, updatedDesign]
        : prev.filter((d) => d.id !== designRow.id)
    );
  };

  const handleUpdate = async (id: string, field: "nombre" | "stock", value: string | number) => {
    try {
      let updatedValue = value;
      if (field === "nombre") {
        // Extraer solo el nombre base sin extensión
        const nameWithoutExt = value.toString().replace(/\.[^/.]+$/, ""); // Elimina la extensión
        updatedValue = nameWithoutExt || "Sin nombre"; // Evita que quede vacío
      }
      const updated = await updateDesign(id, { [field]: updatedValue });
      setDesignsTable((prev) => prev.map((d) => (d.id === id ? updated : d)));
      setSelectedDesigns((prev) => prev.map((d) => (d.id === id ? updated : d)));
    } catch (err) {
      console.error("Error actualizando diseño:", err);
    }
  };

  const handleRemove = async (id: string) => {
    try {
      const updatedDesign = await updateDesign(id, { selected: false });
      setDesignsTable((prev) =>
        prev.map((d) => (d.id === id ? updatedDesign : d))
      );
      setSelectedDesigns((prev) => prev.filter((d) => d.id !== id));
    } catch (err) {
      console.error("Error al quitar diseño:", err);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Diseños</h2>

      {/* Contenedor superior → Imágenes de Storage con botón de carga */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-semibold text-gray-700">Imágenes Disponibles en Storage</h3>
          <label className="bg-blue-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-blue-700 transition">
            {uploading ? "Subiendo..." : "Cargar Imagen"}
            <input
              type="file"
              accept="image/*"
              onChange={handleUpload}
              className="hidden"
              disabled={uploading}
            />
          </label>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
          {storageDesigns.length > 0 ? (
            storageDesigns.map((design) => {
              const designRow = designsTable.find((d) => d.imagen_url === design.url);
              const isSelected = designRow?.selected || false;
              return (
                <div
                  key={design.name}
                  className={`relative w-full h-32 border rounded-lg overflow-hidden cursor-pointer transition ${
                    isSelected ? "border-4 border-blue-500" : "border-gray-300 hover:border-gray-400"
                  }`}
                  onClick={() => designRow && toggleSelectDesign(design)}
                >
                  <img
                    src={design.url}
                    alt={design.name}
                    className="w-full h-full object-contain p-1"
                  />
                  {isSelected && (
                    <span className="absolute top-1 right-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                      Seleccionado
                    </span>
                  )}
                </div>
              );
            })
          ) : (
            <p className="text-gray-600 col-span-full text-center">No hay diseños disponibles en storage</p>
          )}
        </div>
      </div>

      {/* Contenedor inferior → Diseños seleccionados de la tabla */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h3 className="text-xl font-semibold mb-4 text-gray-700">Diseños Seleccionados</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {selectedDesigns.length > 0 ? (
            selectedDesigns.map((design) => (
              <div key={design.id} className="bg-white shadow-md rounded-lg p-4 relative">
                <img src={design.imagen_url} alt={design.nombre} className="w-full h-40 object-contain" />
                <input
                  type="text"
                  value={design.nombre.replace(/\.[^/.]+$/, "")} // Mostrar solo nombre base
                  onChange={(e) => handleUpdate(design.id, "nombre", e.target.value)}
                  className="mt-2 border rounded-lg p-1 w-full"
                  placeholder="Nombre (sin extensión)"
                />
                <input
                  type="number"
                  value={design.stock}
                  onChange={(e) => handleUpdate(design.id, "stock", parseInt(e.target.value) || 0)}
                  className="mt-2 border rounded-lg p-1 w-24"
                  min="0"
                />
                <button
                  onClick={() => handleRemove(design.id)}
                  className="mt-2 bg-red-600 text-white px-4 py-1 rounded-lg hover:bg-red-700 transition"
                >
                  Quitar
                </button>
              </div>
            ))
          ) : (
            <p className="text-gray-600 col-span-full text-center">No hay diseños seleccionados</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Designs;

// Contenido de: services/designs.ts

// designs.ts
import { supabase } from "../lib/supabaseClient";

// Traer diseños de la tabla con sus metadatos
export const getDesigns = async () => {
  const { data, error } = await supabase
    .from("disenos")
    .select("*")
    .order("created_at", { ascending: false });
  if (error) throw error;
  return data;
};

// Insertar diseño si no existe
export const addDesignMeta = async (nombre: string, imagenUrl: string) => {
  const { data, error } = await supabase
    .from("disenos")
    .insert([{ nombre, imagen_url: imagenUrl, stock: 0, selected: false }])
    .select()
    .single();
  if (error) throw error;
  return data;
};

// Actualizar nombre, stock o selected
export const updateDesign = async (id: string, fields: Partial<{ nombre: string; stock: number; selected: boolean }>) => {
  const { data, error } = await supabase
    .from("disenos")
    .update(fields)
    .eq("id", id)
    .select()
    .single();
  if (error) throw error;
  return data;
};

