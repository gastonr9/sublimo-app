// Contenido de: components/Designs.tsx

import React, { useEffect, useState } from "react";
import { listDesignsFromStorage, uploadDesign, removeDesignFromStorage } from "../services/storage";
import { getDesigns, addDesignMeta, updateDesign, deleteDesign } from "../services/designs";

interface StorageDesign {
  name: string;
  url: string;
}

interface DesignRow {
  id: string;
  nombre: string;
  imagen_url: string;
  stock: number;
  selected: boolean;
}

const Designs: React.FC = () => {
  const [storageDesigns, setStorageDesigns] = useState<StorageDesign[]>([]);
  const [designsTable, setDesignsTable] = useState<DesignRow[]>([]);
  const [selectedDesigns, setSelectedDesigns] = useState<DesignRow[]>([]);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    fetchAll();
  }, []);

  const fetchAll = async () => {
    try {
      const [storage, table] = await Promise.all([listDesignsFromStorage(), getDesigns()]);
      setStorageDesigns(storage);
      setDesignsTable(table);
      // Sincronizar selectedDesigns con los que tienen selected = true
      const initiallySelected = table.filter((design) => design.selected);
      setSelectedDesigns(initiallySelected);
    } catch (err) {
      console.error("Error al traer diseños:", err);
    }
  };

  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      setUploading(true);
      try {
        const file = files[0];
        const newDesign = await uploadDesign(file);
        setDesignsTable((prev) => [...prev, newDesign]);
        setStorageDesigns((prev) => [
          ...prev,
          { name: newDesign.nombre, url: newDesign.imagen_url },
        ]);
      } catch (err) {
        console.error("Error al subir diseño:", err);
      } finally {
        setUploading(false);
        event.target.value = ""; // Reset input
      }
    }
  };

  const toggleSelectDesign = async (storageDesign: StorageDesign) => {
    const designRow = designsTable.find((d) => d.imagen_url === storageDesign.url);
    if (!designRow) return;

    const newSelected = !designRow.selected;
    const updatedDesign = await updateDesign(designRow.id, { selected: newSelected });
    setDesignsTable((prev) =>
      prev.map((d) => (d.id === designRow.id ? updatedDesign : d))
    );
    setSelectedDesigns((prev) =>
      newSelected
        ? [...prev, updatedDesign]
        : prev.filter((d) => d.id !== designRow.id)
    );
  };

  const handleUpdate = async (id: string, field: "nombre" | "stock", value: string | number) => {
    try {
      let updatedValue = value;
      if (field === "nombre") {
        // Extraer solo el nombre base sin extensión
        const nameWithoutExt = value.toString().replace(/\.[^/.]+$/, ""); // Elimina la extensión
        updatedValue = nameWithoutExt || "Sin nombre"; // Evita que quede vacío
      }
      const updated = await updateDesign(id, { [field]: updatedValue });
      setDesignsTable((prev) => prev.map((d) => (d.id === id ? updated : d)));
      setSelectedDesigns((prev) => prev.map((d) => (d.id === id ? updated : d)));
    } catch (err) {
      console.error("Error actualizando diseño:", err);
    }
  };

  const handleRemove = async (id: string) => {
    try {
      const updatedDesign = await updateDesign(id, { selected: false });
      setDesignsTable((prev) =>
        prev.map((d) => (d.id === id ? updatedDesign : d))
      );
      setSelectedDesigns((prev) => prev.filter((d) => d.id !== id));
    } catch (err) {
      console.error("Error al quitar diseño:", err);
    }
  };

  const handleDeleteDesign = async (storageDesign: StorageDesign) => {
    if (!window.confirm("¿Estás seguro de que deseas eliminar esta imagen y su registro? Esta acción no se puede deshacer.")) {
      return;
    }

    try {
      const designRow = designsTable.find((d) => d.imagen_url === storageDesign.url);
      if (designRow) {
        // Eliminar de Storage
        await removeDesignFromStorage(storageDesign.name);
        // Eliminar de la tabla disenos
        await deleteDesign(designRow.id);
        // Actualizar estados
        setStorageDesigns((prev) => prev.filter((d) => d.name !== storageDesign.name));
        setDesignsTable((prev) => prev.filter((d) => d.id !== designRow.id));
        setSelectedDesigns((prev) => prev.filter((d) => d.id !== designRow.id));
      }
    } catch (err) {
      console.error("Error al eliminar diseño:", err);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Diseños</h2>

      {/* Contenedor superior → Imágenes de Storage con botón de carga y eliminación */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-semibold text-gray-700">Imágenes Disponibles en Storage</h3>
          <label className="bg-blue-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-blue-700 transition">
            {uploading ? "Subiendo..." : "Cargar Imagen"}
            <input
              type="file"
              accept="image/*"
              onChange={handleUpload}
              className="hidden"
              disabled={uploading}
            />
          </label>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
          {storageDesigns.length > 0 ? (
            storageDesigns
              .map((design) => {
                const designRow = designsTable.find((d) => d.imagen_url === design.url);
                return { ...design, ...designRow }; // Combinar storageDesign con designRow para tener stock y selected
              })
              .sort((a, b) => {
                // Ordenar primero por selected (true antes que false) y luego por stock (descendente)
                if (a.selected !== b.selected) {
                  return a.selected ? -1 : 1; // true (seleccionados) primero
                }
                return b.stock - a.stock; // Dentro de cada grupo, ordenar por stock descendente
              })
              .map((design) => {
                const isSelected = design.selected || false;
                return (
                  <div
                    key={design.name}
                    className={`relative w-full h-32 border rounded-lg overflow-hidden cursor-pointer transition ${
                      isSelected ? "border-4 border-blue-500" : "border-gray-300 hover:border-gray-400"
                    }`}
                  >
                    <img
                      src={design.url}
                      alt={design.name}
                      className="w-full h-full object-contain p-1"
                    />
                    {isSelected && (
                      <span className="absolute top-1 right-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                        Seleccionado
                      </span>
                    )}
                    <button
                      onClick={() => handleDeleteDesign(design)}
                      className="absolute top-1 left-1 bg-red-600 text-white text-xs px-2 py-1 rounded-lg hover:bg-red-700 transition"
                    >
                      Eliminar
                    </button>
                  </div>
                );
              })
          ) : (
            <p className="text-gray-600 col-span-full text-center">No hay diseños disponibles en storage</p>
          )}
        </div>
      </div>

      {/* Contenedor inferior → Diseños seleccionados de la tabla */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h3 className="text-xl font-semibold mb-4 text-gray-700">Diseños Seleccionados</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {selectedDesigns.length > 0 ? (
            selectedDesigns.map((design) => (
              <div key={design.id} className="bg-white shadow-md rounded-lg p-4 relative">
                <img src={design.imagen_url} alt={design.nombre} className="w-full h-40 object-contain" />
                <input
                  type="text"
                  value={design.nombre.replace(/\.[^/.]+$/, "")} // Mostrar solo nombre base
                  onChange={(e) => handleUpdate(design.id, "nombre", e.target.value)}
                  className="mt-2 border rounded-lg p-1 w-full"
                  placeholder="Nombre (sin extensión)"
                />
                <input
                  type="number"
                  value={design.stock}
                  onChange={(e) => handleUpdate(design.id, "stock", parseInt(e.target.value) || 0)}
                  className="mt-2 border rounded-lg p-1 w-24"
                  min="0"
                />
                <button
                  onClick={() => handleRemove(design.id)}
                  className="mt-2 bg-red-600 text-white px-4 py-1 rounded-lg hover:bg-red-700 transition"
                >
                  Quitar
                </button>
              </div>
            ))
          ) : (
            <p className="text-gray-600 col-span-full text-center">No hay diseños seleccionados</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Designs;

// Contenido de: services/designs.ts

// designs.ts
import { supabase } from "../lib/supabaseClient";

// Traer diseños de la tabla con sus metadatos
export const getDesigns = async () => {
  const { data, error } = await supabase
    .from("disenos")
    .select("*")
    .order("created_at", { ascending: false });
  if (error) throw error;
  return data;
};

// Insertar diseño si no existe
export const addDesignMeta = async (nombre: string, imagenUrl: string) => {
  const { data, error } = await supabase
    .from("disenos")
    .insert([{ nombre, imagen_url: imagenUrl, stock: 0, selected: false }])
    .select()
    .single();
  if (error) throw error;
  return data;
};

// Actualizar nombre, stock o selected
export const updateDesign = async (id: string, fields: Partial<{ nombre: string; stock: number; selected: boolean }>) => {
  const { data, error } = await supabase
    .from("disenos")
    .update(fields)
    .eq("id", id)
    .select()
    .single();
  if (error) throw error;
  return data;
};
export const deleteDesign = async (id: string) => {
  const { error } = await supabase
    .from("disenos")
    .delete()
    .eq("id", id);
  if (error) throw error;
};

// Contenido de: services/storage.ts

// storage.ts
import { supabase } from "../lib/supabaseClient";

// Listar imágenes desde el bucket "designs"
export const listDesignsFromStorage = async () => {
  const { data, error } = await supabase.storage
    .from("designs")
    .list("", { limit: 100, sortBy: { column: "created_at", order: "desc" } });

  if (error) throw error;

  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  if (!supabaseUrl) {
    throw new Error("VITE_SUPABASE_URL no está definido en el entorno");
  }

  return data.map((file) => ({
    name: file.name,
    url: `${supabaseUrl}/storage/v1/object/public/designs/${file.name}`,
  }));
};

// Subir imagen y crear registro en la tabla disenos
export const uploadDesign = async (file: File) => {
  const fileName = `${Date.now()}-${file.name}`; // Nombre único con timestamp
  const { error: uploadError } = await supabase.storage
    .from("designs")
    .upload(fileName, file, {
      cacheControl: "3600",
      upsert: false,
    });

  if (uploadError) throw uploadError;

  // Crear registro en la tabla disenos
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const imagenUrl = `${supabaseUrl}/storage/v1/object/public/designs/${fileName}`;
  const { data, error: insertError } = await supabase
    .from("disenos")
    .insert([{ nombre: file.name, imagen_url: imagenUrl, stock: 0 }])
    .select()
    .single();

  if (insertError) throw insertError;

  return data;
};

export const removeDesignFromStorage = async (fileName: string) => {
  const { error } = await supabase.storage
    .from("designs")
    .remove([fileName]);
  if (error) throw error;
};

