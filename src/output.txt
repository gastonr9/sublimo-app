// Contenido de: components/Pedidos.tsx

import React, { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import RemeraPreview from "./RemeraPreview";
interface Pedido {
  id: string;
  nombre: string;
  apellido: string;
  estado: string;
  fecha: string;
  inventario_id: string;
  diseno_id: string;
  producto_nombre?: string;
  talla?: string;
  color?: string;
  diseno_nombre?: string;
  diseno_url?: string;
}

const Pedidos: React.FC = () => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchPedidos();
  }, []);

  const fetchPedidos = async () => {
    try {
      setLoading(true);

      const { data, error } = await supabase
        .from("pedidos")
        .select(
          `
          id,
          nombre,
          apellido,
          estado,
          fecha,
          inventario_id,
          diseno_id,
          inventario:inventario_id (
            talla,
            color,
            producto:producto_id ( nombre )
          ),
          diseno:diseno_id (
            nombre,
            imagen_url
          )
        `
        )
        .order("fecha", { ascending: false });

      if (error) throw error;

      const mapped = data.map((p: any) => ({
        id: p.id,
        nombre: p.nombre,
        apellido: p.apellido,
        estado: p.estado,
        fecha: p.fecha,
        inventario_id: p.inventario_id,
        diseno_id: p.diseno_id,
        producto_nombre: p.inventario?.producto?.nombre || "",
        talla: p.inventario?.talla || "",
        color: p.inventario?.color || "",
        diseno_nombre: p.diseno?.nombre || "",
        diseno_url: p.diseno?.imagen_url || "",
      }));

      setPedidos(mapped);
    } catch (err) {
      console.error("Error cargando pedidos:", err);
    } finally {
      setLoading(false);
    }
  };

  // Cambiar estado del pedido usando RPC
  const handleChangeEstado = async (pedidoId: string, nuevoEstado: string) => {
    try {
      // mapear "confirmado" ‚Üí "realizado"
      const estadoValido =
        nuevoEstado === "confirmado" ? "realizado" : nuevoEstado;

      const { error } = await supabase.rpc("alterar_estado_pedido", {
        p_id: pedidoId,
        p_new_estado: estadoValido,
      });

      if (error) throw error;

      alert(`‚úÖ Estado cambiado a ${estadoValido}`);
      fetchPedidos(); // refresca la lista
    } catch (err) {
      console.error("Error cambiando estado:", err);
      alert("‚ùå No se pudo cambiar el estado del pedido");
    }
  };

  const handleDeletePedido = async (pedidoId: string) => {
    try {
      const { error } = await supabase
        .from("pedidos")
        .delete()
        .eq("id", pedidoId);

      if (error) throw error;

      alert("üóëÔ∏è Pedido eliminado correctamente");
      fetchPedidos();
    } catch (err) {
      console.error("Error eliminando pedido:", err);
      alert("‚ùå No se pudo eliminar el pedido");
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">Gesti√≥n de Pedidos</h2>

      {loading ? (
        <p>Cargando pedidos...</p>
      ) : pedidos.length === 0 ? (
        <p>No hay pedidos registrados.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {pedidos.map((pedido) => (
            <div key={pedido.id} className="bg-white shadow-md rounded-lg p-4">
              <RemeraPreview
                color={pedido.color || "#ffffff"}
                disenoUrl={pedido.diseno_url || ""}
              />
              <p>
                <strong>Producto:</strong> {pedido.producto_nombre}
              </p>
              <p>
                <strong>Talle:</strong> {pedido.talla}
              </p>
              <p>
                <strong>Color:</strong> {pedido.color}
              </p>
              <p>
                <strong>Dise√±o:</strong> {pedido.diseno_nombre}
              </p>
              <p>
                <strong>Cliente:</strong> {pedido.nombre} {pedido.apellido}
              </p>
              <p>
                <strong>Estado:</strong>{" "}
                <span
                  className={`px-2 py-1 rounded text-white ${
                    pedido.estado === "pendiente"
                      ? "bg-yellow-500"
                      : pedido.estado === "realizado"
                      ? "bg-green-600"
                      : "bg-red-600"
                  }`}
                >
                  {pedido.estado}
                </span>
              </p>

              {/* BOTONES SEG√öN ESTADO */}
              <div className="mt-4 flex gap-2">
                {pedido.estado === "pendiente" && (
                  <>
                    <button
                      onClick={() => handleChangeEstado(pedido.id, "realizado")}
                      className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                    >
                      Confirmar
                    </button>
                    <button
                      onClick={() => handleChangeEstado(pedido.id, "cancelado")}
                      className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                    >
                      Cancelar
                    </button>
                  </>
                )}

                {pedido.estado === "realizado" && (
                  <>
                    <button
                      onClick={() => handleChangeEstado(pedido.id, "cancelado")}
                      className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                    >
                      Cancelar
                    </button>
                    <button
                      onClick={() => handleDeletePedido(pedido.id)}
                      className="bg-gray-600 text-white px-3 py-1 rounded hover:bg-gray-700"
                    >
                      Eliminar
                    </button>
                  </>
                )}

                {pedido.estado === "cancelado" && (
                  <button
                    onClick={() => handleDeletePedido(pedido.id)}
                    className="bg-gray-600 text-white px-3 py-1 rounded hover:bg-gray-700"
                  >
                    Eliminar
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Pedidos;


// Contenido de: components/Inventario.tsx

//src/components/Inventario.tsx
import React, { useEffect, useState } from "react";
import {
  getProductos,
  addProducto,
  uploadStock,
  uploadProducto,
  deleteProducto,
  deleteCombinacion,
  getColoresFijos,
} from "../services/inventario";
import { Producto, Color } from "../types/types";
const Inventario: React.FC = () => {
  const [precio, setPrecio] = useState("");
  const [productos, setProductos] = useState<Producto[]>([]);
  const [coloresFijos, setColoresFijos] = useState<Color[]>([]);
  const [nuevoProducto, setNuevoProducto] = useState({
    nombre: "",
    precio: "",
    descripcion: "",
  });
  const [nuevaCombinacion, setNuevaCombinacion] = useState({
    idProducto: "",
    talla: "S",
    color: "",
    stock: 0,
  });
  const [editando, setEditando] = useState<{ [key: string]: boolean }>({});
  const [productoEditado, setProductoEditado] = useState<{
    id: string;
    nombre: string;
    precio: number;
    descripcion: string;
  } | null>(null);

  // === Cargar productos y colores ===
  useEffect(() => {
    const cargarDatos = async () => {
      const productosData = await getProductos();
      setProductos(productosData);

      const coloresData = await getColoresFijos();
      setColoresFijos(coloresData);

      if (coloresData.length > 0) {
        setNuevaCombinacion((prev) => ({
          ...prev,
          color: coloresData[0].nombre,
        }));
      }
    };
    cargarDatos();
  }, []);

  const handleAgregarProducto = async () => {
    try {
      await addProducto({
        ...nuevoProducto,
        precio: parseInt(nuevoProducto.precio, 10) || 0, // üî• siempre int
      });
      setProductos(await getProductos());
      setNuevoProducto({ nombre: "", precio: "", descripcion: "" }); // üî• reseteamos como string
    } catch (error: any) {
      alert(error.message);
    }
  };

  const handleActualizarStock = async (
    idProducto: string,
    talla: string,
    color: string,
    nuevoStock: number
  ) => {
    try {
      const producto = productos.find((p) => p.id === idProducto);
      const item = producto?.inventario.find(
        (i) => i.talla === talla && i.color === color
      );
      if (!item) throw new Error("Combinaci√≥n no encontrada");
      const cantidad = nuevoStock - item.stock;
      await uploadStock(idProducto, talla, color, cantidad);
      setProductos(await getProductos());
    } catch (error: any) {
      alert(error.message);
    }
  };

  const handleAgregarCombinacion = async () => {
    try {
      if (!nuevaCombinacion.idProducto)
        throw new Error("Seleccione un producto");
      if (!nuevaCombinacion.color) throw new Error("Seleccione un color");
      await uploadStock(
        nuevaCombinacion.idProducto,
        nuevaCombinacion.talla,
        nuevaCombinacion.color,
        nuevaCombinacion.stock
      );
      setProductos(await getProductos());
      setNuevaCombinacion({
        idProducto: "",
        talla: "S",
        color: coloresFijos.length > 0 ? coloresFijos[0].nombre : "",
        stock: 0,
      });
    } catch (error: any) {
      alert(error.message);
    }
  };

  const handleEditarProducto = (producto: Producto) => {
    setEditando({ ...editando, [producto.id]: true });
    setProductoEditado({
      id: producto.id,
      nombre: producto.nombre,
      precio: producto.precio,
      descripcion: producto.descripcion || "",
    });
  };

  const handleGuardarEdicion = async () => {
    if (productoEditado) {
      try {
        await uploadProducto(productoEditado.id, {
          nombre: productoEditado.nombre,
          precio: productoEditado.precio,
          descripcion: productoEditado.descripcion,
        });
        setProductos(await getProductos());
        setEditando({ ...editando, [productoEditado.id]: false });
        setProductoEditado(null);
      } catch (error: any) {
        alert(error.message);
      }
    }
  };

  const handleCancelarEdicion = (id: string) => {
    setEditando({ ...editando, [id]: false });
    setProductoEditado(null);
  };

  const handleEliminarProducto = async (id: string) => {
    if (window.confirm("¬øEliminar este producto?")) {
      try {
        await deleteProducto(id);
        setProductos(await getProductos());
      } catch (error: any) {
        alert(error.message);
      }
    }
  };

  const handleEliminarCombinacion = async (
    idProducto: string,
    talla: string,
    color: string
  ) => {
    if (
      window.confirm(`¬øEliminar combinaci√≥n Talla: ${talla}, Color: ${color}?`)
    ) {
      try {
        await deleteCombinacion(idProducto, talla, color);
        setProductos(await getProductos());
      } catch (error: any) {
        alert(error.message);
      }
    }
  };

  // Orden de tallas
  const tallaOrden = { S: 0, M: 1, L: 2, XL: 3, XXL: 4 };

  // Validaciones
  const isAgregarProductoDisabled =
    !nuevoProducto.nombre.trim() ||
    !nuevoProducto.precio.trim() || // ahora s√≠ funciona porque es string
    !nuevoProducto.descripcion.trim();

  const isAgregarCombinacionDisabled =
    nuevaCombinacion.stock <= 0 ||
    !nuevaCombinacion.talla ||
    !nuevaCombinacion.color ||
    !nuevaCombinacion.idProducto;

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
        Inventario de Productos
      </h1>

      {/* Agregar producto */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4 text-gray-700">
          Agregar Producto
        </h2>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <input
            type="text"
            placeholder="Nombre"
            value={nuevoProducto.nombre}
            onChange={(e) =>
              setNuevoProducto({ ...nuevoProducto, nombre: e.target.value })
            }
            className="border rounded-lg p-2"
          />
          <input
            type="number"
            placeholder="Precio"
            value={nuevoProducto.precio}
            onChange={(e) => {
              const value = e.target.value;
              if (/^\d*$/.test(value)) {
                // solo d√≠gitos
                setNuevoProducto({ ...nuevoProducto, precio: value });
              }
            }}
            className="border p-2 rounded w-full"
          />
          <input
            type="text"
            placeholder="Descripci√≥n"
            value={nuevoProducto.descripcion}
            onChange={(e) =>
              setNuevoProducto({
                ...nuevoProducto,
                descripcion: e.target.value,
              })
            }
            className="border rounded-lg p-2 sm:col-span-2"
          />
        </div>
        <button
          onClick={handleAgregarProducto}
          className={`mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg ${
            isAgregarProductoDisabled
              ? "opacity-50 cursor-not-allowed"
              : "hover:bg-blue-700"
          }`}
          disabled={isAgregarProductoDisabled}
        >
          Agregar Producto
        </button>
      </div>

      {/* Lista de productos */}
      <div className="space-y-6">
        {productos.map((producto) => (
          <div key={producto.id} className="bg-white shadow-md rounded-lg p-6">
            {editando[producto.id] ? (
              <div className="space-y-4">
                <input
                  type="text"
                  value={productoEditado?.nombre || ""}
                  onChange={(e) =>
                    setProductoEditado({
                      ...productoEditado!,
                      nombre: e.target.value,
                    })
                  }
                  className="border rounded-lg p-2"
                />
                <input
                  type="number"
                  placeholder="Precio"
                  value={nuevoProducto.precio}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Solo permitir enteros positivos
                    if (/^\d*$/.test(value)) {
                      setNuevoProducto({ ...nuevoProducto, precio: value });
                    }
                  }}
                  className="border p-2 rounded w-full"
                />
                <input
                  type="text"
                  value={productoEditado?.descripcion || ""}
                  onChange={(e) =>
                    setProductoEditado({
                      ...productoEditado!,
                      descripcion: e.target.value,
                    })
                  }
                  className="border rounded-lg p-2"
                />
                <button
                  onClick={handleGuardarEdicion}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg"
                >
                  Guardar
                </button>
                <button
                  onClick={() => handleCancelarEdicion(producto.id)}
                  className="bg-red-600 text-white px-4 py-2 rounded-lg"
                >
                  Cancelar
                </button>
              </div>
            ) : (
              <>
                <h3 className="text-lg font-semibold">{producto.nombre}</h3>
                <p>Precio: ${producto.precio.toFixed(2)}</p>
                <p>{producto.descripcion}</p>
                <button
                  onClick={() => handleEditarProducto(producto)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleEliminarProducto(producto.id)}
                  className="bg-red-600 text-white px-4 py-2 rounded-lg"
                >
                  Eliminar
                </button>
              </>
            )}

            {/* Inventario */}
            <h4 className="mt-4 font-semibold">Inventario</h4>
            <ul>
              {[...producto.inventario]
                .sort((a, b) => {
                  const ordenA = tallaOrden[a.talla as keyof typeof tallaOrden];
                  const ordenB = tallaOrden[b.talla as keyof typeof tallaOrden];
                  if (ordenA !== ordenB) return ordenA - ordenB;
                  return a.color.localeCompare(b.color);
                })
                .map((item, i) => (
                  <li key={i} className="flex items-center gap-2">
                    <span>
                      {item.talla} - {item.color}
                    </span>
                    <input
                      type="number"
                      value={item.stock}
                      onFocus={(e) =>
                        e.target.value === "0" && e.target.select()
                      }
                      onChange={(e) =>
                        handleActualizarStock(
                          producto.id,
                          item.talla,
                          item.color,
                          parseInt(e.target.value) || 0
                        )
                      }
                      min="0"
                      className="border rounded-lg p-1 w-20"
                    />
                    <button
                      onClick={() =>
                        handleEliminarCombinacion(
                          producto.id,
                          item.talla,
                          item.color
                        )
                      }
                      className="bg-red-500 text-white px-2 py-1 rounded"
                    >
                      Eliminar
                    </button>
                  </li>
                ))}
            </ul>

            {/* Agregar combinaci√≥n */}
            <div className="mt-4">
              <h4 className="font-semibold">Agregar Combinaci√≥n</h4>
              <select
                value={nuevaCombinacion.talla}
                onChange={(e) =>
                  setNuevaCombinacion({
                    ...nuevaCombinacion,
                    talla: e.target.value,
                    idProducto: producto.id, // üî• aseguramos que siempre tenga producto
                  })
                }
                className="border rounded-lg p-2"
              >
                {["S", "M", "L", "XL", "XXL"].map((t) => (
                  <option key={t}>{t}</option>
                ))}
              </select>
              <select
                value={nuevaCombinacion.color}
                onChange={(e) =>
                  setNuevaCombinacion({
                    ...nuevaCombinacion,
                    color: e.target.value,
                    idProducto: producto.id, // üî•
                  })
                }
                className="border rounded-lg p-2 ml-2"
              >
                {coloresFijos.map((c) => (
                  <option key={c.nombre}>{c.nombre}</option>
                ))}
              </select>
              <input
                type="number"
                value={nuevaCombinacion.stock}
                onFocus={(e) => e.target.value === "0" && e.target.select()}
                onChange={(e) => {
                  const newStock = Math.max(0, parseInt(e.target.value) || 0);
                  console.log("Nuevo stock:", newStock);
                  setNuevaCombinacion({
                    ...nuevaCombinacion,
                    stock: newStock,
                    idProducto: producto.id, // üî•
                  });
                }}
                min="0"
                className="border rounded-lg p-2 ml-2 w-20"
              />
              <button
                onClick={handleAgregarCombinacion}
                className={`ml-2 bg-green-600 text-white px-4 py-2 rounded-lg ${
                  isAgregarCombinacionDisabled
                    ? "opacity-50 cursor-not-allowed"
                    : "hover:bg-green-700"
                }`}
                disabled={isAgregarCombinacionDisabled}
              >
                A√±adir
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Inventario;


// Contenido de: services/inventario.ts

// src/services/inventario.ts
import { supabase } from "../lib/supabaseClient";

import { Producto, Inventario, Color } from '../types/types';
// =========================
// Productos
// =========================
export const getProductos = async (): Promise<Producto[]> => {
  const { data, error } = await supabase
    .from('productos')
    .select('*, inventario(*)')
    .order('fecha_actualizacion', { ascending: false });

  if (error) throw error;

  return data as Producto[];
};

export const getProductoPorId = async (id: string): Promise<Producto | null> => {
  const { data, error } = await supabase
    .from('productos')
    .select('*, inventario(*)')
    .eq('id', id)
    .single();

  if (error) {
    console.error(error);
    return null;
  }
  return data as Producto;
};

export const addProducto = async (producto: Omit<Producto, 'id' | 'fechaActualizacion' | 'inventario'>) => {
  const { data, error } = await supabase
    .from('productos')
    .insert([producto])
    .select()
    .single();

  if (error) throw error;
  return data.id;
};

export const uploadProducto = async (id: string, producto: Partial<Producto>) => {
  const { error } = await supabase
    .from('productos')
    .update({
      ...producto,
      fecha_actualizacion: new Date(),
    })
    .eq('id', id);

  if (error) throw error;
};

export const deleteProducto = async (id: string) => {
  const { error } = await supabase.from('productos').delete().eq('id', id);
  if (error) throw error;
};

// =========================
// Inventario (talle + color)
// =========================
export const uploadStock = async (
  productoId: string,
  talla: string,
  color: string,
  cantidad: number
) => {
  // Buscar si ya existe esa combinaci√≥n
  const { data: existente, error: fetchError } = await supabase
    .from('inventario')
    .select('*')
    .eq('producto_id', productoId)
    .eq('talla', talla)
    .eq('color', color)
    .maybeSingle();

  if (fetchError) throw fetchError;

  if (!existente) {
    // Insertar nuevo registro
    const { error } = await supabase.from('inventario').insert([
      {
        producto_id: productoId,
        talla,
        color,
        stock: cantidad >= 0 ? cantidad : 0,
      },
    ]);
    if (error) throw error;
  } else {
    // Actualizar stock existente
    const nuevoStock = existente.stock + cantidad;
    if (nuevoStock < 0) throw new Error('Stock insuficiente');
    const { error } = await supabase
      .from('inventario')
      .update({ stock: nuevoStock })
      .eq('id', existente.id);
    if (error) throw error;
  }
};

export const deleteCombinacion = async (
  productoId: string,
  talla: string,
  color: string
) => {
  const { error } = await supabase
    .from('inventario')
    .delete()
    .eq('producto_id', productoId)
    .eq('talla', talla)
    .eq('color', color);

  if (error) throw error;
};

// =========================
// Colores
// =========================
export const getColoresDisponibles = async (): Promise<Color[]> => {
  const { data, error } = await supabase.from('colores_fijos').select('*');
  if (error) throw error;
  return data as Color[];
};

// Obtener colores v√°lidos para un talle espec√≠fico
export const getColoresPorTalle = async (
  productoId: string,
  talla: string
): Promise<Color[]> => {
  const { data, error } = await supabase
    .from('inventario')
    .select('color')
    .eq('producto_id', productoId)
    .eq('talla', talla)
    .gt('stock', 0);

  if (error) throw error;

  const coloresUnicos = Array.from(new Set(data.map((i) => i.color)));

  const { data: coloresFijos } = await supabase
    .from('colores_fijos')
    .select('*')
    .in('nombre', coloresUnicos);

  return coloresFijos || [];
};

// =========================
// Talles
// =========================
export const getTallesDisponibles = async (
  productoId: string
): Promise<string[]> => {
  const { data, error } = await supabase
    .from('inventario')
    .select('talla')
    .eq('producto_id', productoId)
    .gt('stock', 0);

  if (error) throw error;

  return Array.from(new Set(data.map((i) => i.talla))).sort();
};

export const getColoresFijos = async (): Promise<Color[]> => {
  const { data, error } = await supabase
    .from("colores_fijos")
    .select("nombre, hex");

  if (error) {
    console.error("Error obteniendo colores fijos:", error.message);
    return [];
  }

  return data as Color[];
};


